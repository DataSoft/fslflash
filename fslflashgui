#!/usr/bin/python3

import configparser
import os
import sys
import zipfile

from PyQt5.QtCore import Qt, QThread, QDir, QIODevice, QTimer, pyqtSignal
from PyQt5.QtGui import QCursor
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QProgressDialog, QMessageBox

from fsl import Ui_main_window
from fsl import flash
from fsl import flash_package

class FlashHandler(QThread):
    status = pyqtSignal(str)
    success = pyqtSignal()

    def __init__(self, package, serial, parent=None):
        QThread.__init__(self, parent)
        self.package = package
        self.serial = serial

    def run(self):
        if self.package:
            flash_package(self.package, statusio=self)
        if self.serial:
            flash(serial=self.serial, statusio=self)
        self.success.emit()

    def write(self, text):
        self.status.emit(text.rstrip())

    def flush(self):
        pass


class MainWindow(QMainWindow, Ui_main_window):
    def __init__(self):
        QMainWindow.__init__(self)
        self.setupUi(self)
        self.action_open.triggered.connect(self.open_package)
        self.action_exit.triggered.connect(self.close)
        self.flash_button.setEnabled(False)
        self.flash_button.clicked.connect(self.do_flash)
        self.program_button.clicked.connect(self.do_program)
        self.flash_thread = None
        self.flash_dialog = QMessageBox(self)
        self.flash_dialog.setWindowModality(Qt.ApplicationModal)
        self.flash_dialog.setWindowTitle('Updating Device...')
        self.flash_dialog.setStandardButtons(QMessageBox.Cancel)
        self.flash_dialog.setMinimumWidth(600)
        self.package = None

    def open_package(self):
        f, _ = QFileDialog.getOpenFileName(self, 'Open fslflash package file', '', '*.zip', None, QFileDialog.DontUseNativeDialog)
        if len(f) == 0:
            return
        self.set_package(f)

    def set_package(self, f):
        self.package = f
        self.flash_button.setEnabled(True)
        with zipfile.ZipFile(self.package) as package:
            with package.open('manifest.txt') as manifest:
                for line in manifest:
                    entry = line.decode('UTF-8').rstrip()
                    (partition, filename) = entry.split(':')
                    if partition == 'bootstrap':
                        self.bootstrap_label.setText(filename)
                    elif partition == 'u-boot':
                        self.uboot_label.setText(filename)
                    elif partition == 'fdt':
                        self.fdt_label.setText(filename)
                    elif partition == 'kernel-image':
                        self.kernel_label.setText(filename)
                    elif partition == 'rootfs':
                        self.rootfs_label.setText(filename)

    def do_flash(self):
        self.flash_thread = FlashHandler(self.package, None, self)
        self.flash_thread.status.connect(self.flash_status)
        self.flash_thread.success.connect(self.flash_complete)
        self.flash_dialog.buttonClicked.connect(self.flash_cancel)
        self.flash_dialog.setText('Starting Flash')
        self.flash_dialog.show()
        self.flash_thread.start()

    def do_program(self):
        self.flash_thread = FlashHandler(None, self.serial_spinbox.value(), self)
        self.flash_thread.status.connect(self.flash_status)
        self.flash_thread.success.connect(self.program_complete)
        self.flash_dialog.buttonClicked.connect(self.program_cancel)
        self.flash_dialog.setText('Programming EEPROM')
        self.flash_dialog.show()
        self.flash_thread.start()

    def flash_status(self, status):
        self.flash_dialog.setText(status)

    def flash_complete(self):
        self.flash_dialog.accept()
        self.statusbar.showMessage('Flash Success!')

    def flash_cancel(self, button):
        if self.flash_thread.isRunning():
            self.flash_thread.terminate()
        self.statusbar.showMessage('Flash Cancelled')

    def program_complete(self):
        self.flash_dialog.accept()
        self.statusbar.showMessage('Program EEPROM Success!')
        self.serial_spinbox.setValue(self.serial_spinbox.value() + 1)

    def program_cancel(self, button):
        if self.flash_thread.isRunning():
            self.flash_thread.terminate()
        self.statusbar.showMessage('Program EEPROM Cancelled')

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    if len(sys.argv) > 1:
        window.set_package(sys.argv[1])
    sys.exit(app.exec_())
