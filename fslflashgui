#!/usr/bin/python3

import configparser
import os
import sys

from PyQt5.QtCore import Qt, QThread, QDir, QIODevice, QTimer, pyqtSignal
from PyQt5.QtGui import QCursor
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QProgressDialog, QMessageBox

from fsl import Ui_main_window
from fsl import flash

class FlashHandler(QThread):
    status = pyqtSignal(str)
    success = pyqtSignal()

    def __init__(self, files, serial, parent=None):
        QThread.__init__(self, parent)
        self.files = files
        self.serial = serial

    def run(self):
        f = self.files
        flash(f['bootstrap'], f['uboot'], f['fdt'], f['kernel'], f['rootfs'], self.serial, statusio=self)
        self.success.emit()

    def write(self, text):
        self.status.emit(text.rstrip())

    def flush(self):
        pass


class MainWindow(QMainWindow, Ui_main_window):
    def __init__(self):
        QMainWindow.__init__(self)
        self.setupUi(self)
        self.bootstrap_button.setStyleSheet('text-align: left')
        self.uboot_button.setStyleSheet('text-align: left')
        self.fdt_button.setStyleSheet('text-align: left')
        self.kernel_button.setStyleSheet('text-align: left')
        self.rootfs_button.setStyleSheet('text-align: left')
        self.action_open.triggered.connect(self.open_config)
        self.action_save.triggered.connect(self.save_config)
        self.action_save_as.triggered.connect(self.save_config_as)
        self.action_exit.triggered.connect(self.close)
        self.all_selected.stateChanged.connect(self.select_all)
        self.bootstrap_button.clicked.connect(lambda: self.open_file('bootstrap image', '*.imx;;*', self.bootstrap_button))
        self.uboot_button.clicked.connect(lambda: self.open_file('uboot image', '*.nand;;*', self.uboot_button))
        self.fdt_button.clicked.connect(lambda: self.open_file('device tree image', '*.dtb;;*', self.fdt_button))
        self.kernel_button.clicked.connect(lambda: self.open_file('kernel image', 'zImage;;*', self.kernel_button))
        self.rootfs_button.clicked.connect(lambda: self.open_file('rootfs image', '*.ubi;;*', self.rootfs_button))
        self.flash_button.clicked.connect(self.do_flash)
        self.program_button.clicked.connect(self.do_program)
        self.paths_relative_to = os.getcwd()
        self.open_path = os.getcwd()
        self.config_file = ''
        self.flash_thread = None
        self.flash_dialog = QMessageBox(self)
        self.flash_dialog.setWindowModality(Qt.ApplicationModal)
        self.flash_dialog.setWindowTitle('Updating Device...')
        self.flash_dialog.setStandardButtons(QMessageBox.Cancel)
        self.flash_dialog.setMinimumWidth(600)

    def open_config(self):
        f, _ = QFileDialog.getOpenFileName(self, 'Open fslflash config file', self.open_path, '*.fslconfig')
        if len(f) == 0:
            return
        self.set_config(f)

    def set_config(self, f):
        self.config_file = f
        self.paths_relative_to = os.path.dirname(f)
        config = configparser.ConfigParser()
        config.read(self.config_file)
        for key in config['files']:
            if key == 'bootstrap':
                self.bootstrap_button.setText(config['files'][key])
            if key == 'uboot':
                self.uboot_button.setText(config['files'][key])
            if key == 'fdt':
                self.fdt_button.setText(config['files'][key])
            if key == 'kernel':
                self.kernel_button.setText(config['files'][key])
            if key == 'rootfs':
                self.rootfs_button.setText(config['files'][key])
        if 'device' in config and 'serial' in config['device']:
            self.serial_spinbox.setValue(int(config['device']['serial']))

    def save_config_as(self):
        f, _ = QFileDialog.getSaveFileName(self, 'Save fslflash config file', self.config_file, '*.fslconfig')
        if len(f) == 0:
            return
        self.config_file = f
        self.save_config()

    def save_config(self):
        if not self.config_file:
            self.save_config_as()
            return
        configdir = os.path.dirname(self.config_file)
        config = configparser.ConfigParser()
        config['device'] = {}
        config['files'] = {}
        if self.serial_spinbox.value() != 0:
            config['device']['serial'] = str(self.serial_spinbox.value())
        if self.bootstrap_button.text() != 'None Selected':
            config['files']['bootstrap'] = os.path.relpath(os.path.join(self.paths_relative_to, self.bootstrap_button.text()), configdir)
        if self.uboot_button.text() != 'None Selected':
            config['files']['uboot'] = os.path.relpath(os.path.join(self.paths_relative_to, self.uboot_button.text()), configdir)
        if self.fdt_button.text() != 'None Selected':
            config['files']['fdt'] = os.path.relpath(os.path.join(self.paths_relative_to, self.fdt_button.text()), configdir)
        if self.kernel_button.text() != 'None Selected':
            config['files']['kernel'] = os.path.relpath(os.path.join(self.paths_relative_to, self.kernel_button.text()), configdir)
        if self.rootfs_button.text() != 'None Selected':
            config['files']['rootfs'] = os.path.relpath(os.path.join(self.paths_relative_to, self.rootfs_button.text()), configdir)
        with open(self.config_file, 'w') as configfile:
            config.write(configfile)
        self.statusbar.showMessage('Config Saved.', 5000)

    def select_all(self, checked):
        self.bootstrap_selected.setCheckState(checked)
        self.uboot_selected.setCheckState(checked)
        self.fdt_selected.setCheckState(checked)
        self.kernel_selected.setCheckState(checked)
        self.rootfs_selected.setCheckState(checked)

    def open_file(self, filetype, typefilter, button):
        f, _ = QFileDialog.getOpenFileName(self, 'Open {0} file'.format(filetype), self.open_path, typefilter)
        if len(f) == 0:
            return
        self.open_path = os.path.dirname(f)
        f = os.path.relpath(f, self.paths_relative_to)
        button.setText(f)

    def do_flash(self):
        files = {}
        files['bootstrap'] = os.path.join(self.paths_relative_to, self.bootstrap_button.text()) if self.bootstrap_selected.isChecked() else None
        files['uboot'] = os.path.join(self.paths_relative_to, self.uboot_button.text()) if self.uboot_selected.isChecked() else None
        files['fdt'] = os.path.join(self.paths_relative_to, self.fdt_button.text()) if self.fdt_selected.isChecked() else None
        files['kernel'] = os.path.join(self.paths_relative_to, self.kernel_button.text()) if self.kernel_selected.isChecked() else None
        files['rootfs'] = os.path.join(self.paths_relative_to, self.rootfs_button.text()) if self.rootfs_selected.isChecked() else None
        self.flash_thread = FlashHandler(files, None, self)
        self.flash_thread.status.connect(self.flash_status)
        self.flash_thread.success.connect(self.flash_complete)
        self.flash_dialog.buttonClicked.connect(self.flash_cancel)
        self.flash_dialog.setText('Starting Flash')
        self.flash_dialog.show()
        self.flash_thread.start()

    def do_program(self):
        files = { 'bootstrap': None, 'uboot': None, 'fdt': None, 'kernel': None, 'rootfs': None }
        self.flash_thread = FlashHandler(files, self.serial_spinbox.value(), self)
        self.flash_thread.status.connect(self.flash_status)
        self.flash_thread.success.connect(self.program_complete)
        self.flash_dialog.buttonClicked.connect(self.program_cancel)
        self.flash_dialog.setText('Programming EEPROM')
        self.flash_dialog.show()
        self.flash_thread.start()

    def flash_status(self, status):
        self.flash_dialog.setText(status)

    def flash_complete(self):
        self.flash_dialog.accept()
        self.statusbar.showMessage('Flash Success!')

    def flash_cancel(self, button):
        if self.flash_thread.isRunning():
            self.flash_thread.terminate()
        self.statusbar.showMessage('Flash Cancelled')

    def program_complete(self):
        self.flash_dialog.accept()
        self.statusbar.showMessage('Program EEPROM Success!')
        self.serial_spinbox.setValue(self.serial_spinbox.value() + 1)

    def program_cancel(self, button):
        if self.flash_thread.isRunning():
            self.flash_thread.terminate()
        self.statusbar.showMessage('Program EEPROM Cancelled')

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    if len(sys.argv) > 1:
        window.set_config(sys.argv[1])
    sys.exit(app.exec_())
